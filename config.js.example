// HOST and LOCAL are the root locations of Sitrec
// HOST = Remote host, like metabunk.org
// LOCAL = My dev machine, for development and debugging
// note my local is in dist, one level deeper than the HOST because I run directly from the dev build

export const isConsole = (typeof window == 'undefined');

// While we can automatically detect the host, there are situations when we want/need to run
// the sitrecServer tools on the remote host, not on the local dev machine
// so we need to hardwire it below.
//export const SITREC_DOMAIN = "https://www.metabunk.org/sitrec/"

let port = "";

if (!isConsole) {
    port = window.location.port;
    if (port) {
        port = ":" + port;
    }
}

export const SITREC_DOMAIN = (isConsole ? "https://localhost/" : window.location.hostname)
//const SITREC_HOST = (isConsole ? "https://localhost/" : (window.location.protocol + "//" + window.location.hostname + window.location.pathname));
const SITREC_HOST = (isConsole ? "https://localhost/" : (window.location.protocol + "//" + window.location.host + window.location.pathname));

const SITREC_LOCAL = "http://localhost"+port+"/sitrec/"

// console applications are often run from just outside the source tree
const SITREC_CONSOLE_ROOT = "./sitrec/"

// regular expression that allows us to detect if we are local
// for http://localhost, or https://localhost
const SITREC_LOCAL_RE = '^https?:\/\/localhost'

// For the various php based servers in sitrecServer it's different,
// as it's not included in the dist folder
// and needs to be deployed separately
// you can have these wherever you like.
// (on the same domain, as the proxy allows us to safely bypass same-origin policy
export const SITREC_DEV_DOMAIN = "www.metabunk.org"
const SITREC_DEV_SERVER = "https://"+SITREC_DEV_DOMAIN+"/sitrec/sitrecServer/"
const SITREC_HOST_SERVER = SITREC_HOST+"sitrecServer/"
const SITREC_LOCAL_SERVER = "http://localhost"+port+"/sitrec/sitRecServer/"

// local host might not have a capability to act as a php server,
// so we can tell Sitrec to use the remote for the proxies
// by setting SITREC_SERVER_OK_LOCAL to false;
// This makes development a bit harder, as you have to have development code on production server
// you can set SITREC_LOCAL_SERVER to a second non-local address for testing
// and also set SITREC_SERVER_OK_LOCAL to true to force it to use that.
const SITREC_SERVER_OK_LOCAL = true;

const re_localhost = new RegExp(SITREC_LOCAL_RE);

export var isLocal = false;

var checked = false;

export function checkLocal() {
    if (!checked) {
        if(isConsole) {
            console.log("Running as a console application")
            isLocal = true;
        } else {
            console.log("Running on " + window.location.href)
            if (re_localhost.test(window.location.href)) {
                console.log("Running on localhost")
                isLocal = true;
            } else {
                console.log("Not running on localhost");
            }
        }
        checked = true;
    }
}

// This is called at the start of index.js
// but, we want to set the paths here and now, so we
// force a call before that. Do we still need to call it again?
checkLocal();

export const SITREC_ROOT = (isConsole ? SITREC_CONSOLE_ROOT : (isLocal ? SITREC_LOCAL : SITREC_HOST))
export const SITREC_SERVER = ((isLocal && SITREC_SERVER_OK_LOCAL) ? SITREC_LOCAL_SERVER :
    (isLocal ? SITREC_DEV_SERVER : SITREC_HOST_SERVER));
export const SITREC_UPLOAD = SITREC_HOST + "../sitrec-upload/"

console.log(`SITREC_ROOT = ${SITREC_ROOT}`)
console.log(`SITREC_SERVER = ${SITREC_SERVER}`)

export const _configParams = {
   rehostRequiresLogin: false,      // if true, rehosting requires login - currently only supported for Metabunk/Xenforo
};

////////////////////////////////////////////////
// / Gimbal, GoFast, flir1, agua, dume, video, hayle, 29palms, SWR, kml, kansas,
// aa2292, lakemichigan, chilean, porterville, folsomlake, n14aq, swr, swrcss, etc
// This is the sitch that is loaded when running on local
export const localSituation = "custom";
//////////////////////////////////////////////